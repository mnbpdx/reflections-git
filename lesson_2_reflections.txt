1.

Q: What happens when you initialize a repository? Why do you need to do it?

A: When you initialize a repository, a .git file is created in the directory
you are in. This makes it so files can be added to the repository and we
can implement version control on the directory. No commits are made at the
time of initialization.

2.

Q: How is the staging area different from the working directory and the
repository? What value do you think it offers?

A: You add files from the working directory into the repository as a
commit. The staging area acts as a middle ground before making a commit.
I think this is here to prevent errors, as I think I've heard that commits
can't be undone.

3.

Q: How can you use the staging area to make sure you have one commit per
logical change?

A: The staging area provides a place to review your new commit before
you make it. You could add the files you want to the staging area, then
use git diff --staged to compare them to the first commit in the
repository to make see all the changes you're about to add in the new
commit.

4.

Q: What are some situations when branches would be helpful in keeping
your history organized? How would branches help?

A: Branches might help if I was making experimental changes, working
on a new version that I didn't want to merge yet, or working on my
version of a collaborative project.

5.

Q: How do the diagrams help you visualize the branch structure?

A: I do not care for this question. Diagrams allow me to see the branch
structure. Seeing the branch structure on paper helps me visualize
it in my head.

6.

Q: What is the result of merging two branches together? Why do we
represent it in the diagram the way we do?

A: Merging two branches together adds all the lines of code that were
added by each branch, and removes any lines of code that either branch
removed that were there originally. It results in putting master at
the head of the merged branches. In git log, all commits from either
branch will be listed according to timestamp.

7.

Q: What are the pros and cons of Git's automatic merging vs. always doing
merges manually?

A: I find Git's ratio of automatic to manual merging to be pretty reasonable.
Git automatically merges when it wont break the code, and doesn't merge
when there's confusion surrounding changes to the same parts of files.
I think it makes sense to be really conservative on making automatic
changes, because it'd be a total mess to go back and parse out where Git made
mistakes in choosing lines to keep/remove.7.


